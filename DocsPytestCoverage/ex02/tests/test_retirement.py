# content of test_sample.py
from ..questions_settings import Questions
from ..retirement_plan import Retirement
import pytest
import time


class TestRetirement:
    """
    Class for test Retirement class

    Attributes
    ----------
    questions: Question()
        Question class object

    retirement: Retirement()
        Retirement class object

    Methods
    -------
    get_message():
        move to next question

    check_input(monkeypatch)
        check user input

    test_for_replicant(capsys, monkeypatch)
        test for replicant decision

    test_for_replicant2(capsys)
        test for replicant decision

    test_for_hunan(capsys)
        test for human decision

    """

    questions = Questions(10)
    retirement = Retirement()

    def get_message(self):
        """move to next question and return user answer

        Returns:
        --------
        str: user answer
        """
        self.questions.next()
        return self.questions.answer

    def check_input(self, monkeypatch):
        """checking user answer and test input

        Parameters:
        -----------
        monkeypatch : pytest
            modify or replace parts of the system under test during a test

        """
        user_input = "a"
        monkeypatch.setattr("builtins.input", lambda _: user_input)
        message = self.get_message()
        assert message == "a"

    def test_for_replicant(self, capsys, monkeypatch):
        """checking for replicant

        Parameters
        ----------
        capsys: CaptureFixture
            Fixture in pytest that provides a way to capture output generated by a test function

        monkeypatch : pytest
            modify or replace parts of the system under test during a test

        """
        start = time.time()
        for _ in range(10):
            self.check_input(monkeypatch)
        end = time.time()
        self.retirement.calculate(end - start, self.questions.total_points)

    def test_for_replicant2(self, capsys):
        """Test for replicant

        Parameters
        ----------
        capsys: CaptureFixture
            Fixture in pytest that provides a way to capture output generated by a test function

        """
        self.retirement.human_or_replicant()
        captured = capsys.readouterr()
        assert captured.out == "You are Replicant\n"

    def test_for_human(self, capsys):
        """Test for human

        Parameters
        ----------
        capsys: CaptureFixture
            Fixture in pytest that provides a way to capture output generated by a test function

        """
        self.retirement.calculate(16, 90)
        self.retirement.human_or_replicant()
        captured = capsys.readouterr()
        assert captured.out == "Congratulations you are human!\n"

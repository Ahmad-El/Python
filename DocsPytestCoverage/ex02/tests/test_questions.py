from ..questions_settings import Questions
from ..retirement_plan import Retirement
from io import StringIO
import pytest


class TestCheckQuestions:
    """
    Class for checking Questions Class
    ...

    Attributes
    ----------
    question: Question
        Question class object

    Methods
    --------
    test_count_questions()
        testing total questions lens

    test_for_file_existens(capsys):
        testing for non existent file

    get_message()
        passing to next question

    test_get_message(monkeypatch)
        testing user input

    test_get_message_invalid_input_message(monkeypatch)
        testing for invalid input

    test_for_resetting_questions()
        testing reset method of Question
    """

    questions = Questions(10)

    def test_count_questions(self):
        """Testing total count of questins"""
        assert len(self.questions.data) == 10

    def test_for_file_existens(self, capsys):
        """Testing for file existence

        Parameters
        ----------
        capsys: CaptureFixture
            Fixture in pytest that provides a way to capture output generated by a test function
        """
        self.questions.get_ten_random_questions(10, "file_not_exist")
        captured = capsys.readouterr()
        assert captured.out == "data file not found\n"

    def get_message(self):
        """Move to next question and return answer

        Returns:
        --------
            str: answer to current question
        """
        self.questions.next()
        return self.questions.answer

    def test_get_message(self, monkeypatch):
        """Tests input for coincidence

        Parameters:
        -----------
        monkeypatch : pytest
            modify or replace parts of the system under test during a test
        """
        user_input = "a"
        monkeypatch.setattr("builtins.input", lambda prompt: user_input)
        message = self.get_message()
        assert message == "a"

    def test_get_message_invalid_input_message(self, monkeypatch):
        """Testing for invalid input

        Parameters:
        -----------
        monkeypatch : pytest
            modify or replace parts of the system under test during a test

        """
        user_input = ["invalid input", "kalsdjf", "a"]

        def get_inputs(prompt):
            return user_input.pop(0)

        monkeypatch.setattr("builtins.input", get_inputs)
        captured_output = StringIO()
        monkeypatch.setattr("sys.stdout", captured_output)
        message = self.get_message()
        assert message == "a"

    def test_for_resetting_questions(self):
        """Checks Question reset method"""
        self.questions.reset(10)
        assert self.questions.current_question == 0
        assert self.questions.total_points == 0


# if __name__ == "__main__":
#     pytest.main()
